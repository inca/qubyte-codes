<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qubyte Codes</title>
  <link href="https://qubyte.codes"/>
  <link type="application/atom+xml" rel="self" href="https://qubyte.codes/atom.xml"/>
  <updated>2018-01-02T20:46:08Z</updated>
  <id>https://qubyte.codes/</id>
  <author>
    <name>qubyte</name>
  </author>

  <entry>
    <id>https://qubyte.codes/blog/advent-of-code-2017-day-20-task-2</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/advent-of-code-2017-day-20-task-2"/>
    <title>Advent of Code 2017 day 20 task 2</title>
    <published>2018-01-02T20:50:00Z</published>
    <updated>2018-01-02T20:50:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;SPOILER ALERT: If you&amp;#39;re doing the 2017 Advent of Code, you may not want to read
onward&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/tip-arrayfrom</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/tip-arrayfrom"/>
    <title>Tip: Array.from</title>
    <published>2017-12-01T20:00:00Z</published>
    <updated>2017-12-01T20:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;SPOILER ALERT: If you&amp;#39;re doing the advent of code this year, you may not want to
read onward. This post &lt;em&gt;does not&lt;/em&gt; give any solutions away, but does contain
information about how I approached a part of the first challenge&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/my-first-custom-element</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/my-first-custom-element"/>
    <title>My first custom element</title>
    <published>2017-11-16T01:45:00Z</published>
    <updated>2017-11-16T01:45:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;After some years of browser vendors working out what web components should look
like, they&amp;#39;re almost ready for the prime time. The part which I find most
intriguing (custom elements) has finally stabilised. With custom elements, you
can make new HTML elements which have custom behaviour which you define using
JavaScript. In this post I&amp;#39;ll demonstrate a custom element for fuzzy counting&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/test-friendly-mixins</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/test-friendly-mixins"/>
    <title>Test friendly mixins</title>
    <published>2017-07-20T13:30:00Z</published>
    <updated>2017-07-20T13:30:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;I&amp;#39;ve recently been attempting to code a clone of the classic game asteroids
using canvas in the browser. Since this is me, I&amp;#39;ve been distracted by all sorts
of programming detours&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/making-arcade-controls-arduino-leonardo-code</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/making-arcade-controls-arduino-leonardo-code"/>
    <title>Making arcade controls: Arduino Leonardo code</title>
    <published>2017-05-01T00:00:00Z</published>
    <updated>2017-05-01T00:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;I recently got it into my head that I wanted to build an arcade control panel
from parts. Specifically, an 8 way digital joystick and a bunch of buttons. How
it&amp;#39;ll look when finished isn&amp;#39;t important at the moment. It&amp;#39;s enough now to say
that there&amp;#39;ll be a joystick, six regular buttons, and two buttons for start and
select use&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/promises-and-nodejs-event-emitters-dont-mix</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/promises-and-nodejs-event-emitters-dont-mix"/>
    <title>Promises and Node.js event emitters don&#x27;t mix</title>
    <published>2016-12-24T17:00:00Z</published>
    <updated>2016-12-24T17:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;To many experienced Node developers, the title of this post will seem
intuitively obvious. Nevertheless, it&amp;#39;s useful to see what unexpected behaviour
can occur when the two are used together. Here&amp;#39;s an example&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/progressive-enhancement-2</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/progressive-enhancement-2"/>
    <title>Progressive enhancement #2</title>
    <published>2016-11-12T03:00:00Z</published>
    <updated>2016-11-12T03:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;I recently attended ffconf, and was introduced to &lt;code&gt;position: sticky;&lt;/code&gt;. Support
for it is patchy, but where not available the header will scroll out of view as
it did in the past. Where available, the navbar will stick to the top of the
window when the rest of the header is scrolled out of view&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/progressive-enhancement-1</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/progressive-enhancement-1"/>
    <title>Progressive enhancement #1</title>
    <published>2016-10-15T18:00:00Z</published>
    <updated>2016-10-15T18:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;When I first put together the CSS for this blog I avoided a fixed header since
the header felt a bit large, and I didn&amp;#39;t want to take up too much space which
could be used for content&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/tip-customizing-npm-version</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/tip-customizing-npm-version"/>
    <title>Tip: customizing npm version</title>
    <published>2016-09-05T20:00:00Z</published>
    <updated>2016-09-05T20:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;The npm CLI has a bunch of useful utilities for managing projects. The obvious
one is &lt;code&gt;npm test&lt;/code&gt; but there are others. I particularly like working with
&lt;code&gt;npm version&lt;/code&gt; (the subject of this tip)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/adding-missing-features-to-set</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/adding-missing-features-to-set"/>
    <title>Adding missing features to Set</title>
    <published>2016-05-22T16:30:00Z</published>
    <updated>2016-05-22T16:30:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;ES2015 bought a &lt;code&gt;Set&lt;/code&gt; constructor to JavaScript. It&amp;#39;s pretty barebones,
consisting of a constructor which creates objects with a few methods for adding,
removing, checking if something is a member, and iterating over the set.
Instances have the essential quality of a set; an item is a member of the set or
not a member. Unlike an array, an item cannot be an element more than once. In
other words you can avoid using arrays and doing a lot of &lt;code&gt;indexOf&lt;/code&gt; checking&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/a-presentation-on-async-await-and-toisu</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/a-presentation-on-async-await-and-toisu"/>
    <title>A presentation on async-await and Toisu!</title>
    <published>2016-04-06T22:00:00Z</published>
    <updated>2016-04-06T22:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;Just before Christmas I gave a presentation on the upcoming async-await JavaScript language feature,
its basis in promises and generators, and finally a tiny server framework (like Express but a lot
leaner and more modular) which can make use of async functions as middleware (since an async
function is indistinguishable from a normal function which returns a promise). I&amp;#39;ll introduce Toisu!
in a blog post soon, but until then here&amp;#39;s the presentation&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/interfaces-for-javascript</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/interfaces-for-javascript"/>
    <title>Interfaces for JavaScript</title>
    <published>2016-03-13T10:45:00Z</published>
    <updated>2016-03-13T10:45:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;I use &lt;code&gt;instanceof&lt;/code&gt; a lot in JavaScript. It&amp;#39;s very handy when writing unit tests. It&amp;#39;s easier to do
an &lt;code&gt;instanceof&lt;/code&gt; check than it is to exhaustively probe an object&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/private-methods-for-js-classes</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/private-methods-for-js-classes"/>
    <title>Private methods for JS classes</title>
    <published>2016-01-31T02:00:00Z</published>
    <updated>2016-01-31T02:00:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;This is a short companion to an
&lt;a href&#x3D;&quot;/blog/private-data-for-js-classes-with-weakmap&quot;&gt;earlier article I wrote&lt;/a&gt; on using &lt;code&gt;WeakMap&lt;/code&gt; for
private data with JS classes. While private data belongs to instances, private methods can be shared
between instances of a class (just like its regular methods). An implementation using ES2015 modules
looks like&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/how-i-schedule-posts-using-atd</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/how-i-schedule-posts-using-atd"/>
    <title>How I schedule posts using atd</title>
    <published>2016-01-14T19:30:00Z</published>
    <updated>2016-01-14T19:30:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;This blog is built with a static site generator. The generator, the markdown source files, and the
generated HTML files are all kept together in the same git repository. Every time I commit a change,
a pre-commit hook runs the generator and adds the generated HTML, so that the blog entries are
always up to date. Then the changes are pushed up to GitHub&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/about-this-blog-2</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/about-this-blog-2"/>
    <title>About this blog 2</title>
    <published>2016-01-11T20:15:00Z</published>
    <updated>2016-01-11T20:15:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;I touched briefly on the technology used in this blog in
&lt;a href&#x3D;&quot;/blog/about-this-blog.html&quot;&gt;a previous post&lt;/a&gt;, but I didn&amp;#39;t explain the motivation behind a lot of
the choices I made when building it. I&amp;#39;d like to do that in this post. The design and architecture
of this blog is the product of what things I like in other blogs, and also those things that I find
frustrating. Where a choice was not obvious, I opted for the simplest option. The point of the
exercise was to get it online. Below are a few points in no particular order&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/about-this-blog</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/about-this-blog"/>
    <title>About this blog</title>
    <published>2016-01-03T12:22:00Z</published>
    <updated>2016-01-03T12:22:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;This blog took a long time to get started. Every time I tried to build it, I wound up focussed on
some tech I wanted to use to host it. In the previous iteration, I even
&lt;a target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener&quot; href&#x3D;&quot;https://github.com/qubyte/toisu&quot;&gt;wrote a server framework&lt;/a&gt;. I took some holiday over the Christmas
period, so I decided to throw everything away and make something minimal&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>https://qubyte.codes/blog/private-data-for-js-classes-with-weakmap</id>
    <link type="text/html" rel="alternate" href="https://qubyte.codes/blog/private-data-for-js-classes-with-weakmap"/>
    <title>Private data for JS classes with WeakMap</title>
    <published>2015-12-30T14:35:00Z</published>
    <updated>2015-12-30T14:35:00Z</updated>
    <author>
      <name>qubyte</name>
      <uri>https://qubyte.codes</uri>
    </author>
    <content type="html">&lt;p&gt;Private data has always been awkward in JavaScript. It&amp;#39;s particularly difficult when it comes to
constructors, and with ES2015 recently published, classes too. Let&amp;#39;s say we have an example class,
exported by an ES2015 module&lt;/p&gt;
</content>
  </entry>

</feed>
